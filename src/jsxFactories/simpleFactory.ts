import { FactoryType } from 'globals';

type AttributeValue = number | string | Date | boolean;

export interface CustomElementHandler {
    (attributes: Attributes | undefined, contents: string[] | any): any;
}

export interface Attributes {
    [key: string]: AttributeValue;
}

function createElement(
  tagName: string | CustomElementHandler,
  attributes: any,
  ...children: any[]
) : Node {
  if (typeof tagName === 'function') {
    return (tagName(attributes, children));
  }

  const element = document.createElement(tagName);
  if (attributes) {
    for (const key of Object.keys(attributes)) {
      const attributeValue = attributes[key];

      if (key === "className") {
        // JSX does not allow class as a valid name
        element.setAttribute("class", attributeValue);
      } else if (
        key.startsWith("on") &&
        typeof attributes[key] === "function"
      ) {
        element.addEventListener(key.substring(2), attributeValue);
      } else {
        // <input disable />      { disable: true }
        // <input type="text" />  { type: "text"}
        if (typeof attributeValue === "boolean" && attributeValue) {
          element.setAttribute(key, "");
        } else {
          element.setAttribute(key, attributeValue);
        }
      }
    }
  }

  for (const child of children) {
    appendChild(element, child);
  }

  return element;
}

const appendChild = (parent: any, child: any):any => {
  if (typeof child === "undefined" || child === null) {
    return;
  }

  if (Array.isArray(child)) {
    for (const value of child) {
      appendChild(parent, value);
    }
  } else if (typeof child === "string") {
    if (child === 'Generated by: ') {
      parent.appendChild(document.createTextNode('Generated by: simpleFactory'));
    } else {
      parent.appendChild(document.createTextNode(child));
    }

  } else if (child instanceof Node) {
    parent.appendChild(child);
  } else if (typeof child === 'function') {
    parent.appendChild(child());
  } else if (typeof child === "boolean") {
    // <>{condition && <a>Display when condition is true</a>}</>
    // if condition is false, the child is a boolean, but we don't want to display anything
  } else {
    parent.appendChild(document.createTextNode(String(child)));
  }
}

const patch = (element: string, contents: Node) => {
  const parentElement = document.getElementById(element);
  if (!parentElement) return;

  // Remove existing contents
  while (parentElement.firstChild) {
    parentElement.removeChild(parentElement.firstChild);
  }
  parentElement.appendChild(contents);
}

export const JSXFactory = {
  factoryType: FactoryType.Simple,
  createElement,
  patch
}
