import { JSXFactory } from 'jsxFactories/jsxfactory';
import { JSXFactory as SimpleFactory} from 'jsxFactories/simpleFactory';
import { JSXFactory as VDomFactory} from 'jsxFactories/virtualDomFactory';
import { ALink } from 'components/ALink';
import { CounterElement } from 'components/CounterElement';
import { CustomElement } from 'components/CustomElement';
import { NavBar } from 'components/NavBar';

import { VDomPage } from 'pages/vdom';
import { createProjector } from 'maquette';
import { FactoryType } from 'globals';

const g = ['1', '2', '3'];

const App = (attributes?: any, contents?: any) => {

  const currentCount = attributes?.count || '99';
  return <div>
    <h2>JSX text 4f:</h2>
    <p>Generated by: </p>
    <CounterElement count={currentCount}/>
    <div id='vdomroot'/>
    <NavBar Links={[['Home', '/'], ['Page1', '/page1'], ['Page2', '/page2']]} />
    { g.map(t => <p>{t}</p>)}
    <ALink href='k'>AAA</ALink>
    <CustomElement attr='customattr'>NickContents</CustomElement>
    <ALink href='/'><CustomElement attr='customattr'>NickContents</CustomElement></ALink>
  </div>
};

const runSimple = ():void => {
  console.log('Running using Simple JSX Factory');
  SimpleFactory.patch('root', App());
  let counter = 10;
  VDomFactory.initialRender('vdomroot', VDomPage({}, null));

  setInterval(() => {
    const counterElement = document.getElementById('counter') as HTMLElement
    counterElement.innerHTML = counter.toString();
    counter = counter + 1;
  }, 1000);
}

const runVDom = ():void => {
  console.log('Running using VirtualDOM JSX Factory');
  let counter = 56;
  VDomFactory.initialRender('root', App({count: counter}, ));
  setInterval(() => {
    VDomFactory.patch(App({count: counter}, ))
    counter = counter + 1;
  }, 1000);
}

const runMaquette = ():void => {
  console.log('Running using Maquette JSX Factory');
  const projector = createProjector();
  const parentElement = document.getElementById('root');
  let counter = 10;

  if (parentElement) {
    projector.merge(parentElement, () => App({count: counter.toString()}, 'JJ'));
  }

  setInterval(() => {
    counter = counter + 1;
    projector.scheduleRender();
  }, 1000);
}

document.addEventListener('DOMContentLoaded', function () {

  // Use a dictionary instead of if/else/else/else or switch
  const runType = {
    [FactoryType.Simple]: runSimple,
    [FactoryType.Maquette]: runMaquette,
    [FactoryType.VirtualDOM]: runVDom,
    [FactoryType.IncrementalDOM]: runSimple
  }
  runType[JSXFactory.factoryType]();
});