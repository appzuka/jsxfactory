import { FactoryType } from 'globals';
import * as VirtualDOM from 'virtual-dom';

type nodeFunction = (props:VirtualDOM.createProperties, children:any) => VirtualDOM.VNode

const createElement = (tag:string | nodeFunction, props:VirtualDOM.createProperties, ...children:(string | VirtualDOM.VChild)[]): VirtualDOM.VNode => {
  if ((children.length === 1) && (children[0] === 'Generated by: ')) {
    children = ['Generated by: virtual-dom']
  }
  if (typeof tag === 'function') {
    return tag(props, children);
  }
  return VirtualDOM.h(tag, props, children);
}

let rootNode: Element;
let currentTree:VirtualDOM.VNode;

export type InitialRenderFunction = (elementId:string, tree:VirtualDOM.VNode) => void;
export type PatchFunction = (newTree:VirtualDOM.VNode) => void;

const initialRender = (elementId:string, tree:VirtualDOM.VNode) => {
  const parentElement = document.getElementById(elementId);
  if (!parentElement) return;
  currentTree = tree;
  rootNode = VirtualDOM.create(tree) as unknown as Element;
  parentElement.appendChild(rootNode);
}
const patch = (newTree:VirtualDOM.VNode) => {
  const patches = VirtualDOM.diff(currentTree, newTree);
  rootNode = VirtualDOM.patch(rootNode, patches);
  currentTree = newTree;
}

export const JSXFactory = {
  factoryType: FactoryType.VirtualDOM,
  createElement,
  patch,
  initialRender
}

